$WW,1$$FG,1$$TX+CX+HTML,"The Temple Operating System","http://www.templeos.org"$$FG$

$HC,"<iframe width=\"640\" height=\"520\" src=\"http://www.youtube.com/embed/DITowA97X8E\" frameborder=\"0\" allowfullscreen></iframe>"$

TempleOS is an $FG,4$$TX+HTML,"x86_64","http://en.wikipedia.org/wiki/Amd64#AMD64"$$FG$, multi-tasking, multi-cored, public domain, open source, $FG,4$$TX+HTML,"ring-0-only","http://en.wikipedia.org/wiki/Ring_(computer_security)"$$FG$, single-address-map ($FG,4$$TX+HTML,"identity-mapped","http://en.wikipedia.org/wiki/Identity_(mathematics)"$$FG$), non-networked, PC operating system for recreational programming.  It sticks to common, 64-bit hardware instead of distinct drivers because you must $FG,4$$TX+HTML,"shoot-the-moon","http://en.wikipedia.org/wiki/Hearts#Shooting_the_moon"$$FG$.  Also, redundancy and varied capabilities are unpleasant compared to everybody-has-the-same-thing.

Normally, "failure is not an option" applies to operating systems, right?  It must be able to do everything.  Since TempleOS accompanies Windows or Linux, however, failure is an option.  There is no reason to duplicate effort or cover all use cases, such as browsing, multimedia and desktop publishing.  Instead, it is an extrodinarily simple, fun, beautiful thing.  In fact, it's done!  I have capped the number of lines of code at the current number, so it will never become an ugly monstrocity.  I'll make improvements that do not make it grow.  Since, God's temple must be perfect and we have 1,000 years in mind, I do not promise your code will be future-proof.

The main reason TempleOS is simple and beautiful is because it's $FG,4$$TX+HTML,"ring-0-only","http://en.wikipedia.org/wiki/Ring_(computer_security)"$$FG$ and $FG,4$$TX+HTML,"identity-mapped","http://en.wikipedia.org/wiki/Identity_(mathematics)"$$FG$.  Linux wants to be a secure, multi-user mainframe.  That's the vision for Linux.  That's why it has file permissions.  The vision for TempleOS is a modern, 64-bit Commodore 64.  The C64 was a home computer mostly used for games.  It trained my generation how to program.  It was simple, open and hackable.  It was not networked.  The games were not multimedia works of art, but generated programmatically with innocent, programmer (non-artist) quality graphics.  It was simple and unsecure.  If you don't have malware and you don't have bugs, protection just slows things down and makes the code complicated.

A troll might ask, "Why not just use $FG,4$$TX+HTML,"DOS","http://en.wikipedia.org/wiki/DOS"$$FG$?  It was ring-0-only and single-address-map."  Actually, they wouldn't because many people would say, "Cool idea!  I'm gonna dust-off $FG,4$$TX+HTML,"DOS","http://en.wikipedia.org/wiki/DOS"$$FG$ right now and have some fun!"  $FG,4$$TX+HTML,"DOS","http://en.wikipedia.org/wiki/DOS"$$FG$ is 16-bit with segmentation, though, which is awful.  TempleOS is 64-bit, flat, non-segmented and multi-cored.  It's like a modern, souped-up, multi-tasking, cross between $FG,4$$TX+HTML,"DOS","http://en.wikipedia.org/wiki/DOS"$$FG$ and a Commodore 64.  It has a C64-like shell with $LK,"HolyC","FI:::/TempleOS/Doc/HolyC.TXT"$, a dialect of C/C++, instead of BASIC.  It was written from scratch, and not even ASCII was sacred -- it has 8-bit unsigned character source code to support European languages.  Also, the source code has graphics.

A troll might say, "But, it can crash!"  We all used $FG,4$$TX+HTML,"DOS","http://en.wikipedia.org/wiki/DOS"$$FG$ for years and loved it. Computers even had a reset switch!  Just think of the power of ring-0, muhahaha! Think of the speed and simplicity of $FG,4$$TX+HTML,"ring-0-only","http://en.wikipedia.org/wiki/Ring_(computer_security)"$$FG$ and $FG,4$$TX+HTML,"identity-mapping","http://en.wikipedia.org/wiki/Identity_(mathematics)"$$FG$.  It's only $LK+D,"124,033","FF:::/TempleOS/Accts/TS/Wb2/LineCnt.TXT,Kernel.PRJ","DD_TEMPLEOS_LOC"$ lines of code, including the compiler and can change tasks in half a microsecond because it doesn't mess with page tables or privilege levels.  Inter-process communication is effortless because every task can access every other task's memory.

It's fun having access to everything.  When I was a teenager, I had a book, $FG,4$$TX+HTML,"Mapping the Commodore 64","http://unusedino.de/ec64/technical/project64/mapping_c64.html"$$FG$, that told what every location in memory did.  I liked copying the ROM to RAM and poking around at the ROM BASIC's variables.  Everybody directly poked the hardware ports.

TempleOS is simpler than Linux and you can have hours of fun tinkering because all memory and ports are accessible.  Memory is $FG,4$$TX+HTML,"identity-mapped","http://en.wikipedia.org/wiki/Identity_(mathematics)"$$FG$ at all times, so you can modify any task's memory from any other task.  You can access all disk blocks, too.  I had a blast using a C64 disk block editor to modify directories to un-delete files, when I was a kid.  Maybe, you want to play with a raw-block database, or make your own file system?

I wrote all $LK+D,"124,033","FF:::/TempleOS/Accts/TS/Wb2/LineCnt.TXT,Kernel.PRJ","DD_TEMPLEOS_LOC"$ lines of TempleOS over the last $TX+D,"10.2","DD_TEMPLEOS_AGE"$ years, full-time, including the 64-bit compiler.  It was called, at various times, "$FG,4$$TX+HTML,"Hoppy","http://web.archive.org/web/*/http://www.simstructure.hare.com/*"$$FG$", "$FG,4$$TX+HTML,"The J Operating System","http://wayback.archive.org/web/*/http://www.justrighteous.org/*"$$FG$", "$FG,4$$TX+HTML,"LoseThos","http://web.archive.org/web/*/http://www.losethos.com/*"$$FG$" and "$FG,4$$TX+HTML,"SparrowOS","http://web.archive.org/web/*/http://www.sparrowos.com/*"$$FG$".  Here are my $FG,4$$TX+HTML,"college transcripts","http://www.templeos.org/files/ASU_Transcripts.pdf"$$FG$.  I've been a professional operating system developer since 1990 when I was hired to work on Ticketmaster's VAX OS.


$FG,4$$TX+HTML,"Downloads","http://www.templeos.org/Wb/Accts/TS/Wb2/Downloads.html"$$FG$

$FG,4$$TX+HTML,"Screen Shots","http://www.templeos.org/Wb/Accts/TS/Wb2/ScreenShots.html"$$FG$

$FG,4$$TX+HTML,"Tutorial Videos","http://www.templeos.org/Wb/Accts/TS/Wb2/Tutorials.html"$$FG$

$FG,4$$TX+HTML,"Game Videos","http://www.templeos.org/Wb/Accts/TS/Wb2/Games.html"$$FG$

$LK,"Introduction","FI:::/TempleOS/Doc/Welcome.TXT"$

$LK,"Features","FI:::/TempleOS/Doc/Features.TXT.Z"$

$LK,"F.A.Q.","FI:::/TempleOS/Doc/Mysteries.TXT"$

$LK,"TempleOS Help","FI:::/TempleOS/Doc/HelpIndex.TXT"$

$LK,"Source Code By File","FF:::/TempleOS/Accts/TS/Wb2/LineCnt.TXT,KStart.CPP"$

$FG,4$$TX+HTML,"Source Code By Sym","http://www.templeos.org/Wb/Accts/TS/Wb2/SymsAlpha.html"$$FG$

$FG,4$$TX+HTML,"Source Code By Address","http://www.templeos.org/Wb/Accts/TS/Wb2/SymsAddress.html"$$FG$

$FG,4$$TX+HTML,"Source Code (Raw)","http://www.templeos.org/Wb/"$$FG$

$LK,"Change Log","FI:::/TempleOS/Doc/ChangeLog.TXT"$

$FG,8$
* "Commodore 64" was a trademark of Commodore Business Machines.
* "Linux" is probably a trademark owned by Linus Torvalds.
* "Windows" and "DOS" are trademark of MicroSoft Corp.
